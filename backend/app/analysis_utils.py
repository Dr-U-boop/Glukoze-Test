# backend/app/analysis_utils.py
from datetime import time, timedelta

def analyze_patient_data(all_records: list) -> list:
    recommendations = []
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞
    glucose_records = [r for r in all_records if r['record_type'] == 'glucose']
    carb_records = [r for r in all_records if r['record_type'] == 'carbs']
    
    
    # --- –ü—Ä–∞–≤–∏–ª–æ 1: –ü–æ–∏—Å–∫ –Ω–æ—á–Ω—ã—Ö –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏–π ---
    night_lows = 0
    for record in glucose_records:
        record_time = record["timestamp"].time()
        # –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å 00:00 –¥–æ 06:00
        if time(0, 0) <= record_time < time(6, 0):
            if record["value"] < 4.0: # –ü–æ—Ä–æ–≥ –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏–∏
                night_lows += 1
    
    if night_lows > 2: # –ï—Å–ª–∏ –±—ã–ª–æ –±–æ–ª—å—à–µ 2 —Å–ª—É—á–∞–µ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
        recommendations.append(
            "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–æ—á–Ω—ã–µ –≥–∏–ø–æ–≥–ª–∏–∫–µ–º–∏–∏. "
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤–µ—á–µ—Ä–Ω–µ–π –¥–æ–∑—ã –±–∞–∑–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—É–ª–∏–Ω–∞."
        )

    # --- –ü—Ä–∞–≤–∏–ª–æ 2: –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–ø—Ä–∞–Ω–¥–∏–∞–ª—å–Ω—ã—Ö (–ø–æ—Å–ª–µ –µ–¥—ã) –ø–∏–∫–æ–≤ ---
    post_meal_spikes = 0
    # (–≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è, —Ç.–∫. —É –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏.
    # –ú—ã –∏—â–µ–º –ø–∏–∫–∏ –≤ —Ç–∏–ø–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –µ–¥—ã)
    for record in glucose_records:
        record_time = record["timestamp"].time()
        if time(10, 0) <= record_time < time(12, 0) or \
           time(15, 0) <= record_time < time(17, 0) or \
           time(20, 0) <= record_time < time(22, 0):
            if record["value"] > 10.0: # –ü–æ—Ä–æ–≥ –≥–∏–ø–µ—Ä–≥–ª–∏–∫–µ–º–∏–∏
                post_meal_spikes += 1
    
    for meal in carb_records:
        # –ò—â–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–ª—é–∫–æ–∑—ã —á–µ—Ä–µ–∑ ~2 —á–∞—Å–∞ –ø–æ—Å–ª–µ –µ–¥—ã
        two_hours_after = meal['timestamp'] + timedelta(hours=2)
        relevant_glucose_readings = [
            g['value'] for g in glucose_records 
            if meal['timestamp'] < g['timestamp'] <= two_hours_after
        ]
        
        if relevant_glucose_readings:
            peak_glucose = max(relevant_glucose_readings)
            if peak_glucose > 10.0: # –ü–æ—Å—Ç–ø—Ä–∞–Ω–¥–∏–∞–ª—å–Ω–∞—è –≥–∏–ø–µ—Ä–≥–ª–∏–∫–µ–º–∏—è
                meal_time = meal['timestamp'].strftime('%d.%m %H:%M')
                recommendations.append(
                    f"üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π –ø–∏–∫ –≥–ª—é–∫–æ–∑—ã ({peak_glucose} –º–º–æ–ª—å/–ª) –ø–æ—Å–ª–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –≤ {meal_time}. "
                    "–í–æ–∑–º–æ–∂–Ω–æ, —É–≥–ª–µ–≤–æ–¥–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏."
                )
                break # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å

    if not recommendations:
        recommendations.append("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª —è–≤–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π.")

    return recommendations